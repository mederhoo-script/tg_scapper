# Generated by Django 5.2.6 on 2025-09-19 18:43

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Enter a valid phone number')])),
                ('api_id', models.CharField(max_length=50)),
                ('api_hash', models.CharField(max_length=100)),
                ('name', models.CharField(blank=True, help_text='Display name for this account', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MessageTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('content', models.TextField(help_text='Use {name} and {group_link} placeholders')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ScrapedMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField()),
                ('username', models.CharField(blank=True, max_length=100)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('access_hash', models.BigIntegerField(blank=True, null=True)),
                ('is_bot', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True, help_text='Set to False to exclude from exports/invites')),
                ('scraped_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['username', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Settings',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Display name for this group', max_length=200)),
                ('identifier', models.CharField(help_text='Username or invite link', max_length=200)),
                ('group_type', models.CharField(blank=True, choices=[('channel', 'Channel'), ('group', 'Group'), ('supergroup', 'Supergroup'), ('broadcast', 'Broadcast Channel')], max_length=20)),
                ('member_count', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='scraper.account')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('account', 'identifier')},
            },
        ),
        migrations.CreateModel(
            name='InviteLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('already_member', 'Already Member'), ('privacy_restricted', 'Privacy Restricted'), ('flood_wait', 'Flood Wait'), ('user_not_found', 'User Not Found')], max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('attempted_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invite_logs', to='scraper.account')),
                ('target_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invite_logs', to='scraper.group')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invite_logs', to='scraper.scrapedmember')),
            ],
            options={
                'ordering': ['-attempted_at'],
            },
        ),
        migrations.CreateModel(
            name='DMLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_content', models.TextField()),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('privacy_restricted', 'Privacy Restricted'), ('flood_wait', 'Flood Wait'), ('user_not_found', 'User Not Found')], max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dm_logs', to='scraper.account')),
                ('message_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dm_logs', to='scraper.messagetemplate')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dm_logs', to='scraper.scrapedmember')),
            ],
            options={
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='ScrapingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('total_members_found', models.IntegerField(default=0)),
                ('use_message_scraping', models.BooleanField(default=True)),
                ('message_limit', models.IntegerField(default=500)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('csv_file_path', models.CharField(blank=True, max_length=500)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraping_sessions', to='scraper.account')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraping_sessions', to='scraper.group')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddField(
            model_name='scrapedmember',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='scraper.scrapingsession'),
        ),
        migrations.AlterUniqueTogether(
            name='scrapedmember',
            unique_together={('session', 'telegram_id')},
        ),
    ]
